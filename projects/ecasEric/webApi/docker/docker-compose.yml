version: "3.9"

x-collective-policy-synth-common: &collective-policy-synth-common
  env_file: .env
  restart: always
  build:
    context: ../../../../.
    dockerfile: projects/ecasEric/webApi/docker/policy-synth/Dockerfile
  image: policy-synth-ecas-eric:current
  volumes:
    - client-app-dist:/home/node/app/webApp/dist
  command: node dist/src/server.js
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:4078/api/project/healthcheck"]
    interval: 30s
    timeout: 20s
    retries: 3
  network_mode: host
  logging:
    driver: "json-file"
    options:
      max-file: "2000"
      max-size: "25m"

services:
  # ────────────────────────────────────────────
  # Databases
  # ────────────────────────────────────────────
  postgres_db:
    image: postgres:17-alpine
    restart: always
    network_mode: host
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eric_production
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eric_production"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-file: "10"
        max-size: "25m"

  redis_db:
    image: redis:6.2.13-alpine
    restart: always
    network_mode: host
    volumes:
      - redis-db-data:/data

  webserver:
    container_name: webserver
    restart: always
    env_file: .env
    build:
      context: ./webserver/
      dockerfile: Dockerfile
    depends_on:
      - collective-policy-synth-1
    #ports:
    #  - "80:80"
    #  - "443:443"
    volumes:
      - webserver:/home
      - client-app-dist:/home/node/app/webApp/dist
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "https://${FULL_HOSTNAME}/api/project/healthcheck",
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "100"
        max-size: "25m"

  collective-policy-synth-1:
    <<: *collective-policy-synth-common
    environment:
      - PORT=4078
      # make the app find Postgres on host-mode networking.
      # Most Node/Postgres drivers accept e.g. PGHOST, DATABASE_URL, etc.
      - PGHOST=127.0.0.1
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=eric_production
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:4078/api/project/healthcheck"]

volumes:
  webserver:
  client-app-dist:
  redis-db-data:
    driver: local
  postgres-data:
    driver: local
